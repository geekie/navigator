// @flow

export type NavigatorRoute = $Exact<{
  screen: string,
  props?: Object
}>;
export type NavigatorState = Array<Array<NavigatorRoute>>;

type Options = $Exact<{
  animated: boolean
}>;
export type NavigatorActions = $Exact<{
  push(route: NavigatorRoute, options?: Options): void,
  pop(options?: Options): void,
  popTo(screen: string, options?: Options): void,
  replace(route: NavigatorRoute, options?: Options): void,
  reset(route: NavigatorRoute, options?: Options): void,
  pushReset(route: NavigatorRoute, options?: Options): void,
  present(route: NavigatorRoute, options?: Options): void,
  dismiss(options?: Options): void
}>;

type NavigatorScreensConfig = {
  [string]: React$ComponentType<any>
};

type Style =
  | null
  | void
  | number
  | false
  | ""
  | $ReadOnlyArray<Style>
  | { [name: string]: any };

declare export default React$ComponentType<
  $Exact<{
    initialState: NavigatorRoute | NavigatorState,
    screensConfig: NavigatorScreensConfig,
    screenStyle?: Symbol,
    onWillFocus?: (route: NavigatorRoute) => mixed,
    resetState?: (((state: NavigatorState) => void) | null) => mixed
  }>
>;

declare export function withNavigator<Props: {}>(
  Component: React$ComponentType<Props>
): React$ComponentType<$Diff<Props, { navigator: NavigatorActions | void }>>;

declare export class NavigatorProvider extends React$Component<
  $Exact<{ navigator: NavigatorActions }>
> {}
