// @flow

export type NavigatorRoute = $Exact<{
  screen: string,
  props?: Object
}>;
export type NavigatorState = Array<Array<NavigatorRoute>>;

type Options = $Exact<{
  animated: boolean
}>;
export type NavigatorActions = $Exact<{
  push(route: NavigatorRoute, options?: Options): void,
  pop(options?: Options): void,
  popTo(screen: string, options?: Options): void,
  replace(route: NavigatorRoute, options?: Options): void,
  reset(route: NavigatorRoute, options?: Options): void,
  pushReset(route: NavigatorRoute, options?: Options): void,
  present(route: NavigatorRoute, options?: Options): void,
  dismiss(options?: Options): void
}>;

export type NavigatorScreensConfig = {
  [string]: React$ComponentType<any>
};

declare export default React$ComponentType<
  $Exact<{
    initialState: NavigatorRoute | NavigatorState,
    screensConfig: NavigatorScreensConfig,
    onWillFocus?: (route: NavigatorRoute) => mixed,
    resetState?: ((state: NavigatorState) => void) => mixed
  }>
>;

declare export function withNavigator<Props: {}>(
  Component: React$ComponentType<Props>
): React$ComponentType<$Diff<Props, { navigator: NavigatorActions | void }>>;
